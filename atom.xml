<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zakiman.github.io/"/>
  <updated>2020-10-13T15:27:48.762Z</updated>
  <id>http://zakiman.github.io/</id>
  
  <author>
    <name>Shen Haojie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>proxy</title>
    <link href="http://zakiman.github.io/2020/10/13/proxy/"/>
    <id>http://zakiman.github.io/2020/10/13/proxy/</id>
    <published>2020-10-13T15:24:28.166Z</published>
    <updated>2020-10-13T15:27:48.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域的方法有哪些？原理是什么？"><a href="#跨域的方法有哪些？原理是什么？" class="headerlink" title="跨域的方法有哪些？原理是什么？"></a>跨域的方法有哪些？原理是什么？</h2><p>知其然知其所以然，在说跨域方法之前，我们先了解下什么叫跨域，浏览器有同源策略，只有当“协议”、“域名”、“端口号”都相同时，才能称之为是同源，其中有一个不同，即是跨域。</p><p>那么同源策略的作用是什么呢？同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p><p>那么我们又为什么需要跨域呢？一是前端和服务器分开部署，接口请求需要跨域，二是我们可能会加载其它网站的页面作为 iframe 内嵌。</p><p>常用的跨域方法：</p><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>尽管浏览器有同源策略，但是 <script> 标签的 src 属性不会被同源策略所约束，可以获取任意服务器上的脚本并执行。jsonp 通过插入 script 标签的方式来实现跨域，参数只能通过 url 传入，仅能支持 get 请求。</p><p>实现原理:</p><p>Step1: 创建 callback 方法</p><p>Step2: 插入 script 标签</p><p>Step3: 后台接受到请求，解析前端传过去的 callback 方法，返回该方法的调用，并且数据作为参数传入该方法</p><p>Step4: 前端执行服务端返回的方法调用</p><p>下面代码仅为说明 jsonp 原理，项目中请使用成熟的库。分别看一下前端和服务端的简单实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, cb &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//创建 script 标签</span></span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="comment">//将回调函数挂在 window 上</span></span><br><span class="line">    <span class="built_in">window</span>[cb] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">      <span class="comment">//代码执行后，删除插入的 script 标签</span></span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回调函数加在请求地址上</span></span><br><span class="line">    params = &#123; ...params, cb &#125; <span class="comment">//wb=b&amp;cb=show</span></span><br><span class="line">    <span class="keyword">let</span> arrs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:3000/say'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cb: <span class="string">'sayHi'</span>,</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------------------------ */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//express 启动一个后台服务</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/say'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; cb &#125; = req.query <span class="comment">//获取传来的 callback 函数名，cb 是 key</span></span><br><span class="line">  res.send(<span class="string">`<span class="subst">$&#123;cb&#125;</span>('Hello!')`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>从今天起，jsonp 的原理就要了然于心啦~</p><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>jsonp 只能支持 get 请求，cors 可以支持多种请求。cors 并不需要前端做什么工作。</p><p>简单跨域请求:</p><p>只要服务器设置的 Access-Control-Allow-Origin Header 和请求来源匹配，浏览器就允许跨域</p><p>请求的方法是 get，head 或者 post。<br>Content-Type 是 application/x-www-form-urlencoded, multipart/form-data 或 text/plain 中的一个值，或者不设置也可以，一般默认就是 application/x-www-form-urlencoded。<br>请求中没有自定义的 HTTP 头部，如 x-token。(应该是这几种头部 Accept，Accept-Language，Content-Language，Last-Event-ID，Content-Type）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单跨域请求</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'XXXX'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>带预检(Preflighted)的跨域请求</p><p>不满于简单跨域请求的，即是带预检的跨域请求。服务端需要设置 Access-Control-Allow-Origin (允许跨域资源请求的域) 、 Access-Control-Allow-Methods (允许的请求方法) 和 Access-Control-Allow-Headers (允许的请求头)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'XXX'</span>)</span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'XXX'</span>) <span class="comment">//允许返回的头</span></span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'XXX'</span>) <span class="comment">//允许使用 put 方法请求接口</span></span><br><span class="line">  res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>) <span class="comment">//预检的存活时间</span></span><br><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">    res.end() <span class="comment">//如果 method 是 OPTIONS，不做处理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h3><p>使用 nginx 反向代理实现跨域，只需要修改 nginx 的配置即可解决跨域问题。</p><p>A 网站向 B 网站请求某个接口时，向 B 网站发送一个请求，nginx 根据配置文件接收这个请求，代替 A 网站向 B 网站来请求。<br>nginx 拿到这个资源后再返回给 A 网站，以此来解决了跨域问题。</p><p>例如 nginx 的端口号为 8090，需要请求的服务器端口号为 3000。（localhost:8090 请求 localhost:3000/say）</p><p>nginx 配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 8090;</span><br><span class="line"></span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;Users&#x2F;liuyan35&#x2F;Test&#x2F;Study&#x2F;CORS&#x2F;1-jsonp;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x2F;say &#123;</span><br><span class="line">        rewrite  ^&#x2F;say&#x2F;(.*)$ &#x2F;$1 break;</span><br><span class="line">        proxy_pass   http:&#x2F;&#x2F;localhost:3000;</span><br><span class="line">        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span><br><span class="line">        add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;</span><br><span class="line">        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    # others</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p>Websocket 是 HTML5 的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。</p><p>Websocket 不受同源策略影响，只要服务器端支持，无需任何配置就支持跨域。</p><p>前端页面在 8080 的端口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>); <span class="comment">//协议是 ws</span></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">socket.send(<span class="string">'Hi,你好'</span>);</span><br><span class="line">&#125;</span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e.data)</span><br><span class="line">&#125;</span><br><span class="line">服务端 <span class="number">3000</span> 端口。可以看出 websocket 无需做跨域配置。</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>: <span class="number">3000</span>&#125;);</span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data); <span class="comment">//接受到页面发来的消息'Hi,你好'</span></span><br><span class="line">ws.send(<span class="string">'Hi'</span>); <span class="comment">//向页面发送消息</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><p>postMessage 通过用作前端页面之前的跨域，如父页面与 iframe 页面的跨域。window.postMessage 方法，允许跨窗口通信，不论这两个窗口是否同源。</p><p>话说工作中两个页面之前需要通信的情况并不多，我本人工作中，仅使用过两次，一次是 H5 页面中发送 postMessage 信息，ReactNative 的 webview 中接收此此消息，并作出相应处理。另一次是可轮播的页面，某个轮播页使用的是 iframe 页面，为了解决滑动的事件冲突，iframe 页面中去监听手势，发送消息告诉父页面是否左滑和右滑。</p><p>子页面向父页面发消息</p><p>父页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'message'</span>,</span><br><span class="line">  (e) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.movePage(e.data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>子页面(iframe):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="comment">/*左滑*/</span>) &#123;</span><br><span class="line"><span class="built_in">window</span>.parent &amp;&amp; <span class="built_in">window</span>.parent.postMessage(<span class="number">-1</span>, <span class="string">'*'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="comment">/*右滑*/</span>)&#123;</span><br><span class="line"><span class="built_in">window</span>.parent &amp;&amp; <span class="built_in">window</span>.parent.postMessage(<span class="number">1</span>, <span class="string">'*'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父页面向子页面发消息</p><p>父页面:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">document</span>.querySelector(<span class="string">'#iframe'</span>)</span><br><span class="line">iframe.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  iframe.contentWindow.postMessage(<span class="string">'hello'</span>, <span class="string">'http://localhost:3002'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子页面:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data)</span><br><span class="line">  e.source.postMessage(<span class="string">'Hi'</span>, e.origin) <span class="comment">//回消息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="node-中间件"><a href="#node-中间件" class="headerlink" title="node 中间件"></a>node 中间件</h3><p>node 中间件的跨域原理和 nginx 代理跨域，同源策略是浏览器的限制，服务端没有同源策略。</p><p>node 中间件实现跨域的原理如下:</p><p>1.接受客户端请求</p><p>2.将请求 转发给服务器。</p><p>3.拿到服务器 响应 数据。</p><p>4.将 响应 转发给客户端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跨域的方法有哪些？原理是什么？&quot;&gt;&lt;a href=&quot;#跨域的方法有哪些？原理是什么？&quot; class=&quot;headerlink&quot; title=&quot;跨域的方法有哪些？原理是什么？&quot;&gt;&lt;/a&gt;跨域的方法有哪些？原理是什么？&lt;/h2&gt;&lt;p&gt;知其然知其所以然，在说跨域方法之前，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>event-loop</title>
    <link href="http://zakiman.github.io/2020/10/13/eventLoop/"/>
    <id>http://zakiman.github.io/2020/10/13/eventLoop/</id>
    <published>2020-10-13T15:23:54.940Z</published>
    <updated>2020-10-13T15:28:49.355Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Event Loop</strong> 是一个很重要的概念，指的是计算机系统的一种<strong>运行机制</strong>。</p><p><strong>浏览器</strong> 或 <strong>Node</strong> 对于 <strong>javascript</strong> 语言就采用这种机制，来解决<strong>单线程运行</strong>带来的一些问题。</p><p>the event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program.<a href="https://en.wikipedia.org/wiki/Event_loop" target="_blank" rel="noopener">参考维基</a></p><h2 id="堆，栈、队列"><a href="#堆，栈、队列" class="headerlink" title="堆，栈、队列"></a>堆，栈、队列</h2><h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><p>堆是一种数据结构，是利用完全二叉树维护的一组数据，堆分为两种，一种为最大堆，一种为最小堆，将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。</p><p>堆是线性数据结构，相当于一维数组，有唯一后继。</p><h3 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h3><p>栈在计算机科学中是限定仅在表尾进行插入或删除操作的线性表。栈是一种数据结构，它按照<strong>后进先出</strong>的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据。</p><p>栈是只能在某一端插入和删除的特殊线性表。</p><h3 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h3><p>特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。</p><p>进行插入操作的端称为队尾，进行删除操作的端称为队头。 队列中没有元素时，称为空队列。</p><p>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为<strong>先进先出</strong>（FIFO—first in first out）</p><h2 id="任务（Task）"><a href="#任务（Task）" class="headerlink" title="任务（Task）"></a>任务（Task）</h2><p>在 JavaScript 中，任务被分为两种，一种宏任务（MacroTask）也叫 Task，一种叫微任务（MicroTask）。</p><p><img src="/img/event_loop/queue.png" alt="avatar"></p><h3 id="MacroTask（宏任务）"><a href="#MacroTask（宏任务）" class="headerlink" title="MacroTask（宏任务）"></a>MacroTask（宏任务）</h3><ul><li>script 全部代码</li><li>setTimeout、setInterval、setImmediate（浏览器暂时不支持，只有 IE10 支持，具体可见 MDN）</li><li>I/O</li><li>UI Rendering</li></ul><h3 id="MicroTask（微任务）"><a href="#MicroTask（微任务）" class="headerlink" title="MicroTask（微任务）"></a>MicroTask（微任务）</h3><ul><li>Process.nextTick（Node 独有）</li><li>Promise</li><li>Object.observe(废弃)</li><li>MutationObserver</li></ul><h3 id="事件循环的进程模型"><a href="#事件循环的进程模型" class="headerlink" title="事件循环的进程模型"></a>事件循环的进程模型</h3><p>执行栈在执行完同步任务后，查看执行栈是否为空，如果执行栈为空，就会去执行 Task（宏任务），每次宏任务执行完毕后，检查微任务(microTask)队列是否为空，如果不为空的话，会按照先入先出的规则全部执行完微任务(microTask)后，设置微任务(microTask)队列为 null，然后再执行宏任务，如此循环。</p><ul><li>选择当前要执行的任务队列，选择任务队列中最先进入的任务，如果任务队列为空即 null，则执行跳转到微任务（MicroTask）的执行步骤。</li><li>将事件循环中的任务设置为已选择任务。</li><li>执行任务。</li><li>将事件循环中当前运行任务设置为 null。</li><li>将已经运行完成的任务从任务队列中删除。</li><li>microtasks 步骤：进入 microtask 检查点。</li><li>更新界面渲染。</li><li>返回第一步</li></ul><p>执行进入 microtask 检查点时，用户代理会执行以下步骤：</p><ul><li>设置 microtask 检查点标志为 true。</li><li>当事件循环 microtask 执行不为空时：选择一个最先进入的 microtask 队列的 microtask，将事件循环的 microtask 设置为已选择的 microtask，运行 microtask，将已经执行完成的 microtask 为 null，移出 microtask 中的 microtask。</li><li>清理 IndexDB 事务</li><li>设置进入 microtask 检查点的标志为 false。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Event Loop&lt;/strong&gt; 是一个很重要的概念，指的是计算机系统的一种&lt;strong&gt;运行机制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浏览器&lt;/strong&gt; 或 &lt;strong&gt;Node&lt;/strong&gt; 对于 &lt;strong&gt;ja
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>data-type</title>
    <link href="http://zakiman.github.io/2020/10/13/dataType/"/>
    <id>http://zakiman.github.io/2020/10/13/dataType/</id>
    <published>2020-10-13T15:23:34.469Z</published>
    <updated>2020-10-13T15:30:48.113Z</updated>
    
    <content type="html"><![CDATA[<p>学习一门语言，首要掌握它的字符串及数组操作方法，下面是整理的数据类型知识汇总：</p><h2 id="如何判断数据类型"><a href="#如何判断数据类型" class="headerlink" title="如何判断数据类型"></a>如何判断数据类型</h2><ul><li><code>typeof</code> 用以判断基本数据类型，其中 typeof null 返回 object，但是 null 不是对象。</li><li><code>instanceof</code> 是通过原型链判断的，A instanceof B，在 A 的原型链中层层查找，是否有原型等于 B.prototype，如果找到顶端（null）仍未找到，那么返回 false，否则返回 true。</li></ul><p>instanceof 的实现代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// L instanceof R</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">L, R</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> O = R.prototype <span class="comment">// 取R的显式原型</span></span><br><span class="line">  L = L.__proto__ <span class="comment">// 取L的隐式原型</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 找到顶层</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (O === L) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 全等即找到</span></span><br><span class="line">    &#125;</span><br><span class="line">    L = L.__proto__ <span class="comment">// 继续向上查找</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="如何判断一个数组？"><a href="#如何判断一个数组？" class="headerlink" title="如何判断一个数组？"></a>如何判断一个数组？</h3><ul><li>使用 <code>Array.isArray</code> 判断，如果返回 <code>true</code>，说明是数组</li><li>使用 <code>instanceof Array</code> 判断，如果返回 <code>true</code>，说明是数组</li><li>使用 <code>Object.prototype.toString.call</code> 判断，如果返回 <code>[Object Array]</code>，说明是数组</li></ul><hr><h3 id="类数组和数组的区别？"><a href="#类数组和数组的区别？" class="headerlink" title="类数组和数组的区别？"></a>类数组和数组的区别？</h3><p>类数组是一个拥有 length 属性的普通对象，并非 Array 类型，不具备数组的方法。转换数组方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(arrayLike, start)</span><br><span class="line">;[...arrayLike]</span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike)</span><br></pre></td></tr></table></figure><hr><h3 id="数组的哪些-API-会改变原数组？"><a href="#数组的哪些-API-会改变原数组？" class="headerlink" title="数组的哪些 API 会改变原数组？"></a>数组的哪些 API 会改变原数组？</h3><ul><li>修&emsp;改：splice/reverse/fill/copyWithin/sort/push/pop/unshift/shift</li><li>不修改：slice/map/forEach/every/filter/reduce/entries/find</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习一门语言，首要掌握它的字符串及数组操作方法，下面是整理的数据类型知识汇总：&lt;/p&gt;
&lt;h2 id=&quot;如何判断数据类型&quot;&gt;&lt;a href=&quot;#如何判断数据类型&quot; class=&quot;headerlink&quot; title=&quot;如何判断数据类型&quot;&gt;&lt;/a&gt;如何判断数据类型&lt;/h2&gt;&lt;u
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
